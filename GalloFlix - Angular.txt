No Terminal
ng new galloflix
routing y
CSS

Abrir o projeto no visual studio code


No Terminal
cd galloflix


-- Para executar
ng serve -o   


arquivo index.html - adicionar as linhas de cdn do bootstrap
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM" crossorigin="anonymous">

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>


arquivo index.html - adicionar link para fonts.google.com/specimen/Ubuntu
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Ubuntu&display=swap" rel="stylesheet">


arquivo app.component.html - apagar tudo
<router-outlet></router-outlet>


arquivo styles.css
*{
	margin: 0;
	padding: 0;
}

body{
	font-family: 'Ubuntu', sans-serif;
	background-color: #000000;
	overflow-x: hidden;
}


arquivo app.component.html
get navbar from bootstrap: https://getbootstrap.com/docs/5.3/components/navbar/

<!-- navbar start -->   
<nav class="navbar navbar-expand-lg fixed-top">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">GalloFlix</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
      <ul class="navbar-nav ms-auto">
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" href="#">Home</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#">Pesquisar</a>
        </li>
      </ul>
    </div>
  </div>
</nav>
<!-- navbar end -->

<p>
lorem ipsum
</p>

<router-outlet></router-outlet>


arquivo app.component.css

.navbar .navbar-brand{
	color: #E50914;
	font-weight: bold;
}

.navbar-nav .nav-item .nav-link{
	color: #E50914;
	
}


arquivo app.component.ts
import { Component, HostListener } from '@angular/core';

export class AppComponent {
  title = 'galloflix';
  navbg: any;
  @HostListener('document:scroll') scrollover(){
    console.log(document.body.scrollTop, 'scrolllength#');
	
	if (document.body.scrollTop > 0 || document.documentElement.scrollTop > 0){
	  this.navbg = {
	    'background-color':'#000000'
	  }
	} else {
	  this.navbg = {}
	}
  }
}


arquivo app.component.html
<nav class="navbar navbar-expand-lg fixed-top" [ngStyle]="navbg">


SHOW SCROLL EFFECT E CONSOLE LOG


no terminal
ng g c pages/home
ng g c pages/search
ng g c pages/movieDetails


arquivo app-routing.module.ts
import { HomeComponent } from './pages/home/home.component';
import { SearchComponent } from './pages/search/search.component';
import { MovieDetailsComponent } from './pages/movie-details/movie-details.component';

const routes: Routes = [
  {path:'', component:HomeComponent},
  {path:'search', component:SearchComponent},
  {path:'movie/:id', component:MovieDetailsComponent}
];


arquivo app.component.html
trocar href por routerLink="" e routerLink="search"


no terminal
ng g s services/movieApi


arquivo app.module.ts
import { HttpClientModule } from '@angular/common/http';
import { MovieApiService } from './services/movie-api.service';

  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule
  ],
  providers: [
    MovieApiService
  ],



acessar https://developer.themoviedb.org/reference/intro/getting-started, criar uma conta e uma chave de acesso


arquivo movie-api-service.ts
import { HttpClient } from '@angular/common/http';

  constructor(private http:HttpClient) { }

  baseUrl = "https://api.themoviedb.org/3";
  apiKey = "4bce308009138c11bd5ec15086f68483";

  //banner API Data
  bannerApiData(): Observable<any>
  {
    return this.http.get(`${this.baseUrl}/trending/all/week?api_key=${this.apiKey}&language=pt-BR`);
  }
  
  
arquivo home.component.ts
import { Component } from '@angular/core';
import { MovieApiService } from 'src/app/services/movie-api.service';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})
export class HomeComponent {

  constructor(private service:MovieApiService) { }

  ngOnInit(): void {
    this.bannerData();
  }

  // Banner Data
  bannerData(){
    this.service.bannerApiData().subscribe((result)=>{
      console.log(result, 'bannerResult#');
    });
  }

}


SHOW BANNER DATA API ON CONSOLE


arquivo home.component.ts:
export class HomeComponent {

  constructor(private service:MovieApiService) { }

  bannerResult: any=[];

  ngOnInit(): void {
    this.bannerData();
  }

  // Banner Data
  bannerData(){
    this.service.bannerApiData().subscribe((result)=>{
      console.log(result, 'bannerResult#');
      this.bannerResult = result.results;
    });
  }

}


arquivo home.component.html:
<!-- banner start -->
<div class="container-fluid">
    
</div>
<!-- banner end -->


Site bootstrap 
get carousel with captions: https://getbootstrap.com/docs/5.3/components/carousel/



arquivo home.component.html:
<!-- banner start -->
<div class="container-fluid p-0">
    <div id="carouselExampleCaptions" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
          <div class="carousel-item active" data-bs-interval="10000"
          *ngFor="let b of bannerResult">
            <img src="https://image.tmdb.org/t/p/original/{{ b.backdrop_path }}" class="d-block w-100" alt="...">
            <div class="carousel-caption d-none d-md-block">
              <h5>First slide label</h5>
              <p>Some representative placeholder content for the first slide.</p>
            </div>
          </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="prev">
          <span class="carousel-control-prev-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Anterior</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="next">
          <span class="carousel-control-next-icon" aria-hidden="true"></span>
          <span class="visually-hidden">Pr√≥ximo</span>
        </button>
      </div>
</div>
<!-- banner end -->


SHOW RUNNING


arquivo home.component.html:
		<div class="carousel-item"
          data-bs-interval="10000"
          *ngFor="let b of bannerResult; let i=index"
          [ngClass]="{active:i===0}">
            <img src="https://image.tmdb.org/t/p/original/{{b.backdrop_path}}" class="d-block w-100" alt="...">
            <div class="carousel-caption d-none d-md-block">
              <h2>{{b.title??b.name}}</h2>
              <p>{{b.overview}}</p>
            </div>
          </div>


SHOW RUNNING


arquivo home.component.css:
.carousel-inner{
    height: 750px;
}

.carousel-inner .carousel-item img{
    height: 750px;
    object-fit: cover;
}

.carousel-caption{
    background: rgba(0,0,0,0.5);
    backdrop-filter: blur(5px);
    width: 100%;
    left: 0;
    padding-left: 100px;
    padding-right: 100px;
}

.carousel-caption h2{
    color: #E50914;
    font-weight: bolder;
    font-size: 30px;
}

.carousel-caption p{
    color: #ffffff;
}



arquivo home.component.html
<div class="container mt-3 p-4">

  <!-- trending movies -->
  <div class="row">
    <h5 class="text-white">Filmes em Destaque</h5>
  </div>

</div>


arquivo movie-api-service.ts:

  // trending Movies API Data
  trendingMovieApiData():Observable<any>
  {
    return this.http.get(`${this.baseUrl}/trending/movie/day?api_key=${this.apiKey}&language=pt-BR`);
  }
  

arquivo home.component.ts:
trendingMovieResult: any=[];

  ngOnInit(): void {
    this.bannerData();
    this.trendingData();
  }

 ...

  // Trending Data
  trendingData(){
    this.service.trendingMovieApiData().subscribe((result)=>{
      console.log(result, 'trendingResult#');
      this.trendingMovieResult = result.results;
    });
  }


SHOW RUNNING CONSOLE
  
  
arquivo home.component.html:
  <!-- trending movies -->
  <div class="row">
    <h5 class="text-white">Filmes em Destaque</h5>
    <div class="rowposter" *ngFor="let t of trendingMovieResult">
      <img src="https://image.tmdb.org/t/p/original/{{t.backdrop_path}}" class="d-block w-100" alt="...">
    </div>
  </div>



SHOW RUNNING CONSOLE


arquivo home.component.css:
.rowposter{
    display: flex;
    overflow-y: hidden;
    overflow-x: scroll;
}

.rowimg {
    max-height: 250px;
    object-fit: contain;
    width: 100%;
    box-sizing: content-box;
    transition: transform 450ms;
    margin-right: 7px;
}

.rowimg:hover{
    transform: scale(1.10);
    cursor: pointer;
}

.largeposter{
    max-height: 300px;
}

.rowposter::-webkit-scrollbar{
    display: none;
}



arquivo home.component.html:
<div class="container-fluid mt-5">

  <!-- trending movies -->
  <div class="row">
    <h5 class="text-white">Filmes em Destaque</h5>
    <div class="rowposter mt-3 p-2">
      <ng-container *ngFor="let t of trendingMovieResult">
        <img src="https://image.tmdb.org/t/p/original/{{t.poster_path}}"
        class="rowimg largeposter" alt="t.title"
		[routerLink]="['/movie',t.id]">
      </ng-container>
    </div>
  </div>

</div>
  

SHOW RUNNING








arquivo movie-details.component.html:
<div class="container mt-5 pt-5">
    <div class="row">
        <div class="col-md-2">
            Foto
        </div>
        <div class="col-md-10">
            Texto
        </div>
    </div>
</div>



arquivo movie-api-service.ts:
  // Movie Details API Data
  movieDetails(data:any):Observable<any>{
    return this.http.get(`${this.baseUrl}/movie/${data}?api_key=${this.apiKey}&language=pt-BR`);    
  }



arquivo movie-details.component.ts:
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { MovieApiService } from 'src/app/services/movie-api.service';

@Component({
  selector: 'app-movie-details',
  templateUrl: './movie-details.component.html',
  styleUrls: ['./movie-details.component.css']
})
export class MovieDetailsComponent {

  constructor(private service:MovieApiService, private router:ActivatedRoute) { }



  ngOnInit(): void{
    let id = this.router.snapshot.paramMap.get('id');
    this.getMovie(id);
  }

  getMovie(id:any){
    this.service.movieDetails(id).subscribe((result)=>{
      console.log(result, 'movieDetails#')
    });
  }

}



SHOW RUNNING CONSOLE


arquivo movie-details.component.ts:
  constructor(private service:MovieApiService, private router:ActivatedRoute) { }

  movieResult: any;

  ngOnInit(): void{
    let id = this.router.snapshot.paramMap.get('id');
    this.getMovie(id);
  }

  getMovie(id:any){
    this.service.movieDetails(id).subscribe((result)=>{
      console.log(result, 'movieDetails#');
      this.movieResult = result;
    });
  }



arquivo movie-details.component.html:
<div class="container mt-5 pt-5">
    <div class="row" *ngIf="movieResult">
        <div class="col-md-4">
            <img class="w-100" src="https://image.tmdb.org/t/p/original/{{movieResult.poster_path}}">
        </div>
        <div class="col-md-8 text-white">
            <h1>{{movieResult.title}}</h1>
            <h5 class="mt-4">T√≠tulo Original: {{movieResult.original_title}}</h5>
            <p>Data de Estreia: {{movieResult.release_date | date:'dd/MM/yyyy'}}</p>
            <p>{{movieResult.overview}}</p>
        </div>
    </div>
</div>



SHOW RUNNING 


ADICIONANDO DETALHES AO FILME


arquivo movie-api-service.ts:
  // Movie Trailer API Data
  movieVideo(data: any): Observable<any> {
    return this.http.get(`${this.baseUrl}/movie/${data}/videos?api_key=${this.apiKey}&language=pt-BR`);
  }

  // Movie Cast API Data
  movieCast(data: any): Observable<any> {
    return this.http.get(`${this.baseUrl}/movie/${data}/Casts?api_key=${this.apiKey}&language=pt-BR`);
  }


arquivo movie-details.component.ts:
export class MovieDetailsComponent {

  constructor(private service:MovieApiService, private router:ActivatedRoute) { }

  movieResult: any;
  movieVideoResult: any;
  movieCastResult: any;

  ngOnInit(): void{
    let id = this.router.snapshot.paramMap.get('id');
    this.getMovie(id);
    this.getVideo(id);
    this.getCast(id);
  }

  getMovie(id:any){
    this.service.movieDetails(id).subscribe((result)=>{
      console.log(result, 'movieDetails#');
      this.movieResult = result;
    });
  }

  getVideo(id:any){
    this.service.movieVideo(id).subscribe((result)=>{
      console.log(result, 'movieVideo#');
      this.movieVideoResult = result;
    });
  }

  getCast(id:any){
    this.service.movieCast(id).subscribe((result)=>{
      console.log(result, 'movieVideo#');
      this.movieCastResult = result;
    });
  }

}



SHOW RUNNING CONSOLE


arquivo app.module.ts:
import { DomSanitizer } from "@angular/platform-browser";
import { Pipe, PipeTransform} from "@angular/core";

@Pipe({ name: 'safe' })
export class SafePipe implements PipeTransform {
  constructor(private sanitizer: DomSanitizer) { }
  transform(url: string) {
    return this.sanitizer.bypassSecurityTrustResourceUrl(url);
  }
}

@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    SearchComponent,
    MovieDetailsComponent,
    SafePipe
  ],



arquivo movie-details.component.ts:
  getVideo(id:any){
    this.service.movieVideo(id).subscribe((result)=>{
      result.results.forEach((elem:any) => {
        if (elem.type == "Trailer")
        {
          this.movieVideoResult = "https://www.youtube.com/embed/" + elem.key;
        }
      });
      console.log(this.movieVideoResult, 'movieVideo#');
    });
  }

  getCast(id:any){
    this.service.movieCasts(id).subscribe((result)=>{
      this.movieCastResult = result.cast;
      console.log(this.movieCastResult, 'movieVideo#');
    });
  }



SHOW RUNNING CONSOLE


arquivo movie-details.component.html:
<div class="container my-5 text-white" *ngIf="movieVideoResult">
    <h3 class="my-3">Trailer Oficial</h3>
    <iframe width="100%" height="500" [src]="movieVideoResult | safe"></iframe>
</div>


SHOW RUNNING


arquivo movie-details.component.html:
<div class="container my-5 text-white" *ngIf="movieCastResult">
    <h3 class="my-3">Elenco</h3>
    <div class="row">
        <div class="col-lg-4 col-sm-6" *ngFor="let c of movieCastResult">
            <div class="row">
                <div class="col-lg-3 mb-3" *ngIf="c.profile_path">
                    <img class="w-100" src="https://image.tmdb.org/t/p/original/{{c.profile_path}}">
                </div>
                <div class="col-lg-9 mb-3">
                    <h3>{{c.original_name}}</h3>
                    <p>{{c.character}}</p>
                </div>
            </div>
        </div>
    </div>
</div>








P√ÅGINA DE PESQUISA

arquivo search.component.html:
<div class="container mt-5 pt-5">
    <form>
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Pesquisar Filme...">
            <button class="btn btn-danger" type="button">Pesquisar</button>
        </div>
    </form>
</div>



arquivo search.component.css:
button {
    background-color: #E50914;
    color: #ffffff;
}



arquivo app.module.ts:
import { ReactiveFormsModule } from '@angular/forms';

  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    ReactiveFormsModule
  ],
 


arquivo search.component.ts:
import { Component } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent {

  searchForm = new FormGroup({
    'movieName': new FormControl(null)
  });
  
  submitForm(){
    console.log(this.searchForm.value, 'searchForm#');
  }

}



arquivo search.component.html:
<div class="container mt-5 pt-5">
    <form [formGroup]="searchForm" (ngSubmit)="submitForm()">
        <div class="input-group mb-3">
            <input type="text" class="form-control"
            formControlName="movieName"
            placeholder="Pesquisar Filme...">
            <button class="btn btn-danger" type="submit">Pesquisar</button>
        </div>
    </form>
</div>


SHOW RUNNING CONSOLE



arquivo movie-api-service.ts:
  // search Movie API Data
  searchMovie(data:any):Observable<any>{
    return this.http.get(`${this.baseUrl}/search/movie?api_key=${this.apiKey}&query=${data.movieName}&language=pt-BR`);
  }
  


arquivo search.component.ts:
import { Component } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { MovieApiService } from 'src/app/services/movie-api.service';

@Component({
  selector: 'app-search',
  templateUrl: './search.component.html',
  styleUrls: ['./search.component.css']
})
export class SearchComponent {

  constructor(private service:MovieApiService) { }

  searchForm = new FormGroup({
    'movieName': new FormControl(null)
  });

  submitForm(){
    console.log(this.searchForm.value, 'searchForm#');
    this.service.searchMovie(this.searchForm.value).subscribe((result)=>{
      console.log(result, 'searchMovieSubmit#');
    });
  }

}


SHOW RUNNING CONSOLE


arquivo search.component.ts:
  searchResult: any;

  submitForm(){
    console.log(this.searchForm.value, 'searchForm#');
    this.service.searchMovie(this.searchForm.value).subscribe((result)=>{
      console.log(result, 'searchMovieSubmit#');
      this.searchResult = result.results;
    });
  }
 
 
arquivo search.component.html:
    <div class="row mt-5">
        <div class="col-lg-4" *ngFor="let s of searchResult">
            <div id="movie" class="row" routerLink="movie/s.id">
                <div class="col-lg-3 my-3" *ngIf="s.poster_path">
                    <img src="https://image.tmdb.org/t/p/original/{{s.poster_path}}">
                </div>
                <div id="details" class="col-lg-9 my-3">
                    <h5>{{s.title}}</h5>
                </div>
            </div>
        </div>
    </div>



arquivo search.component.css:
#movie{
    cursor: pointer;
}

img{
    width: 100%;
}

#details{
    color: #ffffff;
}


SHOW RUNNING





GETTING MOVIES BY GENRE

arquivo movie-api-service.ts:
  // Action Movies
  fetchActionMovies():Observable<any> {
    return this.http.get(`${this.baseUrl}/discover/movie?api_key=${this.apiKey}&with_genres=28&language=pt-BR`);
  }

  // Adventure Movies
  fetchAdventureMovies():Observable<any> {
    return this.http.get(`${this.baseUrl}/discover/movie?api_key=${this.apiKey}&with_genres=12&language=pt-BR`);
  }

  // Animation Movies
  fetchAnimationMovies():Observable<any> {
    return this.http.get(`${this.baseUrl}/discover/movie?api_key=${this.apiKey}&with_genres=16&language=pt-BR`);
  }

  // Comedy Movies
  fetchComedyMovies():Observable<any> {
    return this.http.get(`${this.baseUrl}/discover/movie?api_key=${this.apiKey}&with_genres=35&language=pt-BR`);
  }

  // Documentary Movies
  fetchDocumentaryMovies():Observable<any> {
    return this.http.get(`${this.baseUrl}/discover/movie?api_key=${this.apiKey}&with_genres=99&language=pt-BR`);
  }

  // Science-Fiction Movies
  fetchScienceFictionMovies():Observable<any> {
    return this.http.get(`${this.baseUrl}/discover/movie?api_key=${this.apiKey}&with_genres=878&language=pt-BR`);
  }

  // Thriller Movies
  fetchThrillerMovies():Observable<any> {
    return this.http.get(`${this.baseUrl}/discover/movie?api_key=${this.apiKey}&with_genres=53&language=pt-BR`);
  }


arquivo home.component.ts:
  // Action Movies
  actionMovieData(){
    this.service.fetchActionMovies().subscribe((result)=>{
      this.actionMovieResult = result.results;
    });
  }

  // Adventure Movies
  adventureMovieData(){
    this.service.fetchAdventureMovies().subscribe((result)=>{
      this.adventureMovieResult = result.results;
    });
  }

  // Animation Movies
  animationMovieData(){
    this.service.fetchAnimationMovies().subscribe((result)=>{
      this.animationMovieResult = result.results;
    });
  }

  // Comedy Movies
  comedyMovieData(){
    this.service.fetchComedyMovies().subscribe((result)=>{
      this.comedyMovieResult = result.results;
    });
  }

  // Documentary Movies
  documentaryMovieData(){
    this.service.fetchDocumentaryMovies().subscribe((result)=>{
      this.documentaryMovieResult = result.results;
    });
  }

  // Science-Fiction Movies
  scienceFictionMovieData(){
    this.service.fetchScienceFictionMovies().subscribe((result)=>{
      this.scienceFictionMovieResult = result.results;
    });
  }

  // Thriller Movies
  thrillerMovieData(){
    this.service.fetchThrillerMovies().subscribe((result)=>{
      this.thrillerMovieResult = result.results;
    });
  }


  ngOnInit(): void {
    this.bannerData();
    this.trendingData();
    this.actionMovieData();
    this.adventureMovieData();
    this.animationMovieData();
    this.comedyMovieData();
    this.documentaryMovieData();
    this.scienceFictionMovieData();
    this.thrillerMovieData();
  }



arquivo home.component.html:
<!-- action movies -->
  <div class="row mt-5">
    <h5 class="text-white">Filmes de A√ß√£o</h5>
    <div class="rowposter mt-3 p-2">
      <ng-container *ngFor="let a of actionMovieResult">
        <img src="https://image.tmdb.org/t/p/original/{{a.poster_path}}" class="rowimg largeposter" alt="{{a.title}}"
          [routerLink]="['/movie',a.id]">
      </ng-container>
    </div>
  </div>

  <!-- adventure movies -->
  <div class="row mt-5">
    <h5 class="text-white">Filmes de Aventura </h5>
    <div class="rowposter mt-3 p-2">
      <ng-container *ngFor="let a of adventureMovieResult">
        <img src="https://image.tmdb.org/t/p/original/{{a.poster_path}}" class="rowimg largeposter" alt="{{a.title}}"
          [routerLink]="['/movie',a.id]">
      </ng-container>
    </div>
  </div>

  <!-- animation movies -->
  <div class="row mt-5">
    <h5 class="text-white">Filmes de Anima√ß√£o</h5>
    <div class="rowposter mt-3 p-2">
      <ng-container *ngFor="let a of animationMovieResult">
        <img src="https://image.tmdb.org/t/p/original/{{a.poster_path}}" class="rowimg largeposter" alt="{{a.title}}"
          [routerLink]="['/movie',a.id]">
      </ng-container>
    </div>
  </div>

  <!-- comedy movies -->
  <div class="row mt-5">
    <h5 class="text-white">Filmes de Com√©dia</h5>
    <div class="rowposter mt-3 p-2">
      <ng-container *ngFor="let c of comedyMovieResult">
        <img src="https://image.tmdb.org/t/p/original/{{c.poster_path}}" class="rowimg largeposter" alt="{{c.title}}"
          [routerLink]="['/movie',c.id]">
      </ng-container>
    </div>
  </div>

  <!-- documentary movies -->
  <div class="row mt-5">
    <h5 class="text-white">Filmes de Document√°rio</h5>
    <div class="rowposter mt-3 p-2">
      <ng-container *ngFor="let d of documentaryMovieResult">
        <img src="https://image.tmdb.org/t/p/original/{{d.poster_path}}" class="rowimg largeposter" alt="{{d.title}}"
          [routerLink]="['/movie',d.id]">
      </ng-container>
    </div>
  </div>

  <!-- science-fiction movies -->
  <div class="row mt-5">
    <h5 class="text-white">Filmes de Fic√ß√£o-Cient√≠fica</h5>
    <div class="rowposter mt-3 p-2">
      <ng-container *ngFor="let f of scienceFictionMovieResult">
        <img src="https://image.tmdb.org/t/p/original/{{f.poster_path}}" class="rowimg largeposter" alt="{{f.title}}"
          [routerLink]="['/movie',f.id]">
      </ng-container>
    </div>
  </div>

  <!-- thriller movies -->
  <div class="row mt-5">
    <h5 class="text-white">Filmes de Suspense</h5>
    <div class="rowposter mt-3 p-2">
      <ng-container *ngFor="let t of thrillerMovieResult">
        <img src="https://image.tmdb.org/t/p/original/{{t.poster_path}}" class="rowimg largeposter" alt="{{t.title}}"
          [routerLink]="['/movie',t.id]">
      </ng-container>
    </div>
  </div>







  <div class="d-flex mb-3">
      <ng-container *ngFor="let g of movieResult.genres; let i=index">
          <div [ngClass]="{'py-3 pe-3':i===0, 'p-3':i>0}">
              {{g.name}}
          </div>
      </ng-container>
  </div>